import os
from socket import *
from threading import *  # потоки


server_directory = 'E:\python\server_files\\' # путь для функции ls
LOCALHOST = "127.0.0.1"  # ip моего устройства
PORT = 1488  # порт используемый для подключения
BUFSIZE = 1024

# переменные для определения количества клиентов
num_client = 0
max_num_client = 3
global server
global clientsock, clientAddress
# 1 разворачиваем сервер
# создаем сокет сервера
try:
    server = socket(AF_INET, SOCK_STREAM)
    server.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
except error:
    print("Ошибка создания сокета сервера!")


# привязка адреса к сокету
try:
    server.bind((LOCALHOST, PORT))
    print("Сервер запущен")
except error:
    print("Ошибка привязки адреса!")
def getFile(self):
    self.csocket.send("Enter the file name: ".encode())
    # принимаем название файла
    file_name = self.csocket.recv(BUFSIZE).decode()
    # проверяем наличие файла
    if not os.path.isfile("server_files/" + file_name):
        self.csocket.send("There is no such file!".encode())
    else:
        # процедура отправки файла клиенту
        # предупреждение клиента о начале процедуры передачи файла
        self.csocket.send("Передача файла".encode())
        # определяем размер запрошенного файла
        file_size = os.path.getsize('server_files/' + file_name)

        # Процедура протоколирования
        # открываем файл в режиме дописывания
        lg = open('server_files\log_file', 'a')
        lg.write(file_name + ":" + str(file_size) + "\n")
        lg.close()
        # конкретно процедура отправки файла
        f = open('server_files/' + file_name, 'rb')

        send_data = ''

        while send_data != b'':

            # считываем содержимое файла в data
            send_data = f.read(BUFSIZE)
            self.csocket.send(send_data)
def ls(self):

    self.csocket.send("The directory you want to view is the current one?(no): ".encode())
    s = self.csocket.recv(4096).decode()

    child_directory = server_directory
    if (s == "no"):

        self.csocket.send("Enter path: ".encode())
        child_directory = self.csocket.recv(4096).decode()

        child_directory = server_directory + child_directory
    with os.scandir(child_directory) as files:  # отправка каталогов
        subdir = [direc.name for direc in files if direc.is_dir()]
    self.csocket.send(bytes(f"directory list: {subdir}", "UTF-8"))


    with os.scandir(child_directory) as files: # отправка файлов каталога сервера
        files = [file.name for file in files if file.is_file()]
    self.csocket.send(bytes(f"List of files: {files}", "UTF-8"))
def help(self):
    # процедура получения справки
    self.csocket.send("\n"
                      ""
                      "getFile - file transfer\n"
                      "ls - viewing the contents of directories\n"
                      "help - getting help\n"
                      "exit - exit".encode())
class ClientThread(Thread):

    # инициализируем новое подключение
    def __init__(self, clientAddress, clientsocket):
        Thread.__init__(self)  # наследование классов
        self.csocket = clientsocket
        print("New connection: ", clientAddress)
        self.csocket.send("Log in - command auth"
                          "\nExit - command exit".encode())
        # проверка достигнуто ли максимальное количество клиентов
        if num_client > max_num_client:
            self.csocket.send("\nError: The maximum number of clients has been reached".encode())

    # Обработка полученных сообщений от клиентов
    def run(self):

        global num_client  # позволяет менять глобальную переменную в функции
        msg = ''
        while True:
            msg = self.csocket.recv(4096).decode()
            print(msg)
            if msg == "auth":  # процедура аутентификации
                # здесь должна быть функция аутентификации
                self.csocket.send("Input login: ".encode())
                login = self.csocket.recv(4096).decode()
                self.csocket.send("Input password: ".encode())
                passw = self.csocket.recv(4096).decode()
                s = login + ":" + passw + "\n"
                auth = False
                password_list = "server_files/passw"
                pl = open(password_list, "r")
                while True:
                    line = pl.readline()
                    if s == line and s != b"":
                        auth = True
                        break
                    if not line:
                        break
                if auth:
                    self.csocket.send("Authentication was successful!".encode())
                    pl.close()
                    # функции пользователя
                    while True:
                        msg = self.csocket.recv(4096).decode()
                        if msg == "help":
                            help(self)
                        elif msg == "getFile":
                            getFile(self)
                        elif msg == "exit":
                            print("Disabling", clientAddress)
                            break
                        elif msg == "ls":  # просмотр содержимого каталогов сервера
                            ls(self)
                        else:
                            self.csocket.send("There is no such command!".encode())
                else:
                    self.csocket.send("Invalid username or password!".encode())
                    pl.close()
            elif msg == "exit":
                print("Disabling", clientAddress)
                break
            else:
                self.csocket.send("There is no such command!".encode())
        num_client = num_client - 1  # контроль выхода клиента, для допустимого кол-ва клиентов
        self.csocket.close()
# принимаем подключение клиента
while True:
    try:
        server.listen(1)
    except error:
        print("Ошибка прослушивания")
    try:
        clientsock, clientAddress = server.accept()  # принятие подключения клиента
    except error:
        print("Ошибка принятия подключения")
    # создаем отдельный поток для подключившегося клиента
    newthread = ClientThread(clientAddress, clientsock)
    newthread.start()
    num_client = num_client + 1
